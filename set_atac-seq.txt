Pré-requisitos na pasta:
SRR28983752_1.fastq e SRR28983752_2.fastq
Genoma: Homo_sapiens.GRCh38.dna.primary_assembly.fa
GTF: Homo_sapiens.GRCh38.110.gtf
Blacklists: hg38-blacklist.v2.bed

# 1. Trimming dos reads com fastp
fastp -i SRR28983752_1.fastq -I SRR28983752_2.fastq \
      -o trimmed_1.fastq -O trimmed_2.fastq \
      --thread 8 --detect_adapter_for_pe --html fastp_report.html --json fastp_report.json

# 2. Alinhamento com bowtie2
# wget https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.5.1/bowtie2-2.5.1-linux-x86_64.zip
# unzip bowtie2-2.5.1-linux-x86_64.zip
cd bowtie2-2.5.1-linux-x86_64
export PATH=$PWD:$PATH
cd ..
bowtie2 -q -X 300 --threads 8 \
  -x hg38_index \
  -1 trimmed_1.fastq -2 trimmed_2.fastq \
  -S aligned.sam

# 3. Conversão, ordenação e remoção de reads de chrM e chrY
# Converter para BAM e ordenar
samtools view -Sb aligned.sam | samtools sort -o aligned_sorted.bam

# Indexar
samtools index aligned_sorted.bam

# Remover chrM e chrY
samtools idxstats aligned_sorted.bam | cut -f1 | grep -v -E 'chrM|MT|chrY|Y' > keep_chroms.txt
samtools view -b aligned_sorted.bam $(cat keep_chroms.txt) > aligned_noMTchrY.bam

# Ordenar e indexar novamente
samtools sort -o aligned_noMTchrY.bam aligned_noMTchrY.bam
samtools index aligned_noMTchrY.bam

# 4. Remoção de duplicatas
samtools rmdup aligned_noMTchrY.bam aligned_rmdup.bam

conda activate macs2_py38

# 5. Chamada de picos com MACS2
macs2 callpeak -t aligned_rmdup.bam -f BAMPE -g hs -n peaks \
  --outdir macs2_output --nomodel --keep-dup all \
  --shift -37 --extsize 73 -q 0.01

conda deactivate

# 6. Expandir os picos (summits ±150bp)
awk 'OFS="\t" {center = int(($2 + $3)/2); start = center - 150; if (start < 0) start = 0; end = center + 150; print $1, start, end}' \
  macs2_output/peaks_peaks.narrowPeak > accessible_regions.bed

# 7. Remover regiões blacklist do ENCODE
# Remover regiões com sobreposição ao blacklist
bedtools intersect -a accessible_regions.bed -b hg38-blacklist.v2.bed -v > peaks_filtered.bed

# 8. Criar janela TSS ±10kb por gene
awk '$3 == "gene"' Homo_sapiens.GRCh38.110.gtf | \
awk '{
  match($0, /gene_name "([^"]+)"/, a); gene=a[1];
  start=($7 == "+" ? $4 - 10000 : $5 - 10000);
  end=($7 == "+" ? $4 + 10000 : $5 + 10000);
  if (start < 0) start = 0;
  print $1, start, end, gene
}' OFS="\t" > gene_tss_20kb.bed

# 9. Anotar quais picos estão próximos de quais genes
bedtools intersect -a peaks_filtered.bed -b gene_tss_20kb.bed -wa -wb > peaks_to_genes.bed

# 10. Criar BED anotado: picos com nomes de genes
awk 'OFS="\t" {print $1, $2, $3, $7}' peaks_to_genes.bed > peaks_annotated.bed

# 11. Gerar fragmentos a partir do BAM (lembra dos pares!)
samtools view -h -f 0x2 aligned_rmdup.bam | samtools sort -n -o aligned_by_name_paired.bam
bedtools bamtobed -bedpe -i aligned_by_name_paired.bam > atac_fragments.bed
awk '$1 != "." && $2 >= 0 && $6 >= 0 {
  start = ($2 < $6 ? $2 : $6);
  end = ($2 > $6 ? $2 : $6);
  print $1, start, end
}' OFS="\t" atac_fragments.bed > fragments_clean.bed

# 12. Contar quantos fragmentos caem em cada pico associado a um gene
bedtools intersect -a peaks_annotated.bed -b fragments_clean.bed -c > gene_peak_counts.bed









# 9. Associar picos a genes
bedtools intersect -a peaks_filtered.bed -b gene_tss_20kb.bed -wa -wb > peaks_to_genes.bed

# Filtrar apenas os com nomes de gene
awk 'NF==7 && $7 != "" {print $1, $2, $3, $7}' OFS="\t" peaks_to_genes.bed > peaks_annotated.bed




samtools view -h -f 0x2 aligned_noMTchrY.bam | samtools sort -n -o aligned_by_name_paired.bam


# Converter para BEDPE
bedtools bamtobed -bedpe -i aligned_by_name_paired.bam > atac_fragments.bed

awk '$1 != "." && $2 >= 0 && $6 >= 0 {
  start = ($2 < $6 ? $2 : $6);
  end = ($2 > $6 ? $2 : $6);
  print $1, start, end
}' OFS="\t" atac_fragments.bed > fragments_clean.bed


bedtools intersect -a peaks_annotated.bed -b fragments_clean.bed -c > gene_peak_counts.bed

